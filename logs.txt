yarn run v1.22.19
$ nodemon app.js
[33m[nodemon] 2.0.22[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching path(s): *.*[39m
[33m[nodemon] watching extensions: js,mjs,json[39m
[32m[nodemon] starting `node app.js`[39m
Firebase connected:  FirebaseAppImpl {
  _isDeleted: false,
  _options: {
    apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
    authDomain: 'bot-is-server-down.firebaseapp.com',
    projectId: 'bot-is-server-down',
    storageBucket: 'bot-is-server-down.appspot.com',
    messagingSenderId: '637780255326',
    appId: '1:637780255326:web:9fe24afc83358d770f0acf'
  },
  _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
  _name: '[DEFAULT]',
  _automaticDataCollectionEnabled: false,
  _container: ComponentContainer {
    name: '[DEFAULT]',
    providers: Map(10) {
      'platform-logger' => [Provider],
      'heartbeat' => [Provider],
      'fire-core-version' => [Provider],
      'fire-core-esm2017-version' => [Provider],
      'fire-js-version' => [Provider],
      'fire-js-all-app-version' => [Provider],
      'firestore' => [Provider],
      'fire-fst-node-version' => [Provider],
      'fire-fst-esm2017-version' => [Provider],
      'app' => [Provider]
    }
  }
}
firestore intialized:  Firestore {
  _authCredentials: FirebaseAuthCredentialsProvider {
    authProvider: Provider {
      name: 'auth-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    currentUser: User { uid: null },
    tokenCounter: 0,
    forceRefresh: false,
    auth: null,
    tokenListener: [Function (anonymous)]
  },
  _appCheckCredentials: FirebaseAppCheckTokenProvider {
    appCheckProvider: Provider {
      name: 'app-check-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    forceRefresh: false,
    appCheck: null,
    latestAppCheckToken: null,
    tokenListener: [Function (anonymous)]
  },
  _databaseId: DatabaseId { projectId: 'bot-is-server-down', database: '(default)' },
  _app: FirebaseAppImpl {
    _isDeleted: false,
    _options: {
      apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
      authDomain: 'bot-is-server-down.firebaseapp.com',
      projectId: 'bot-is-server-down',
      storageBucket: 'bot-is-server-down.appspot.com',
      messagingSenderId: '637780255326',
      appId: '1:637780255326:web:9fe24afc83358d770f0acf'
    },
    _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
    _name: '[DEFAULT]',
    _automaticDataCollectionEnabled: false,
    _container: ComponentContainer { name: '[DEFAULT]', providers: [Map] }
  },
  type: 'firestore',
  _persistenceKey: '[DEFAULT]',
  _settings: FirestoreSettingsImpl {
    host: 'firestore.googleapis.com',
    ssl: true,
    credentials: undefined,
    ignoreUndefinedProperties: false,
    localCache: undefined,
    cacheSizeBytes: 41943040,
    experimentalForceLongPolling: false,
    experimentalAutoDetectLongPolling: true,
    experimentalLongPollingOptions: {},
    useFetchStreams: true
  },
  _settingsFrozen: true,
  _queue: <ref *1> AsyncQueueImpl {
    tail: Promise { <pending> },
    retryableOps: [],
    _isShuttingDown: false,
    delayedOperations: [],
    failure: null,
    operationInProgress: false,
    skipNonRestrictedTasks: false,
    timerIdsToSkip: [],
    backoff: ExponentialBackoff {
      queue: [Circular *1],
      timerId: 'async_queue_retry',
      initialDelayMs: 1000,
      backoffFactor: 1.5,
      maxDelayMs: 60000,
      currentBaseMs: 0,
      timerPromise: null,
      lastAttemptTime: 1706546699733
    },
    visibilityHandler: [Function (anonymous)]
  },
  _firestoreClient: FirestoreClient {
    authCredentials: FirebaseAuthCredentialsProvider {
      authProvider: [Provider],
      currentUser: [User],
      tokenCounter: 0,
      forceRefresh: false,
      auth: null,
      tokenListener: [Function (anonymous)]
    },
    appCheckCredentials: FirebaseAppCheckTokenProvider {
      appCheckProvider: [Provider],
      forceRefresh: false,
      appCheck: null,
      latestAppCheckToken: null,
      tokenListener: [Function (anonymous)]
    },
    asyncQueue: <ref *1> AsyncQueueImpl {
      tail: [Promise],
      retryableOps: [],
      _isShuttingDown: false,
      delayedOperations: [],
      failure: null,
      operationInProgress: false,
      skipNonRestrictedTasks: false,
      timerIdsToSkip: [],
      backoff: [ExponentialBackoff],
      visibilityHandler: [Function (anonymous)]
    },
    databaseInfo: DatabaseInfo {
      databaseId: [DatabaseId],
      appId: '1:637780255326:web:9fe24afc83358d770f0acf',
      persistenceKey: '[DEFAULT]',
      host: 'firestore.googleapis.com',
      ssl: true,
      forceLongPolling: false,
      autoDetectLongPolling: true,
      longPollingOptions: {},
      useFetchStreams: true
    },
    user: User { uid: null },
    clientId: 'zjGtEZ2J4f49jzkMqeRO',
    authCredentialListener: [Function (anonymous)],
    appCheckCredentialListener: [Function (anonymous)]
  }
}
Listening on port 3000
