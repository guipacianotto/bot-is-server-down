yarn run v1.22.19
$ nodemon app.js
[33m[nodemon] 2.0.22[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching path(s): *.*[39m
[33m[nodemon] watching extensions: js,mjs,json[39m
[32m[nodemon] starting `node app.js`[39m
Firebase connected:  FirebaseAppImpl {
  _isDeleted: false,
  _options: {
    apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
    authDomain: 'bot-is-server-down.firebaseapp.com',
    projectId: 'bot-is-server-down',
    storageBucket: 'bot-is-server-down.appspot.com',
    messagingSenderId: '637780255326',
    appId: '1:637780255326:web:9fe24afc83358d770f0acf'
  },
  _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
  _name: '[DEFAULT]',
  _automaticDataCollectionEnabled: false,
  _container: ComponentContainer {
    name: '[DEFAULT]',
    providers: Map(10) {
      'platform-logger' => [Provider],
      'heartbeat' => [Provider],
      'fire-core-version' => [Provider],
      'fire-core-esm2017-version' => [Provider],
      'fire-js-version' => [Provider],
      'fire-js-all-app-version' => [Provider],
      'firestore' => [Provider],
      'fire-fst-node-version' => [Provider],
      'fire-fst-esm2017-version' => [Provider],
      'app' => [Provider]
    }
  }
}
firestore intialized:  Firestore {
  _authCredentials: FirebaseAuthCredentialsProvider {
    authProvider: Provider {
      name: 'auth-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    currentUser: User { uid: null },
    tokenCounter: 0,
    forceRefresh: false,
    auth: null,
    tokenListener: [Function (anonymous)]
  },
  _appCheckCredentials: FirebaseAppCheckTokenProvider {
    appCheckProvider: Provider {
      name: 'app-check-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    forceRefresh: false,
    appCheck: null,
    latestAppCheckToken: null,
    tokenListener: [Function (anonymous)]
  },
  _databaseId: DatabaseId { projectId: 'bot-is-server-down', database: '(default)' },
  _app: FirebaseAppImpl {
    _isDeleted: false,
    _options: {
      apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
      authDomain: 'bot-is-server-down.firebaseapp.com',
      projectId: 'bot-is-server-down',
      storageBucket: 'bot-is-server-down.appspot.com',
      messagingSenderId: '637780255326',
      appId: '1:637780255326:web:9fe24afc83358d770f0acf'
    },
    _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
    _name: '[DEFAULT]',
    _automaticDataCollectionEnabled: false,
    _container: ComponentContainer { name: '[DEFAULT]', providers: [Map] }
  },
  type: 'firestore',
  _persistenceKey: '[DEFAULT]',
  _settings: FirestoreSettingsImpl {
    host: 'firestore.googleapis.com',
    ssl: true,
    credentials: undefined,
    ignoreUndefinedProperties: false,
    localCache: undefined,
    cacheSizeBytes: 41943040,
    experimentalForceLongPolling: false,
    experimentalAutoDetectLongPolling: true,
    experimentalLongPollingOptions: {},
    useFetchStreams: true
  },
  _settingsFrozen: true,
  _queue: <ref *1> AsyncQueueImpl {
    tail: Promise { <pending> },
    retryableOps: [],
    _isShuttingDown: false,
    delayedOperations: [],
    failure: null,
    operationInProgress: false,
    skipNonRestrictedTasks: false,
    timerIdsToSkip: [],
    backoff: ExponentialBackoff {
      queue: [Circular *1],
      timerId: 'async_queue_retry',
      initialDelayMs: 1000,
      backoffFactor: 1.5,
      maxDelayMs: 60000,
      currentBaseMs: 0,
      timerPromise: null,
      lastAttemptTime: 1706540590801
    },
    visibilityHandler: [Function (anonymous)]
  },
  _firestoreClient: FirestoreClient {
    authCredentials: FirebaseAuthCredentialsProvider {
      authProvider: [Provider],
      currentUser: [User],
      tokenCounter: 0,
      forceRefresh: false,
      auth: null,
      tokenListener: [Function (anonymous)]
    },
    appCheckCredentials: FirebaseAppCheckTokenProvider {
      appCheckProvider: [Provider],
      forceRefresh: false,
      appCheck: null,
      latestAppCheckToken: null,
      tokenListener: [Function (anonymous)]
    },
    asyncQueue: <ref *1> AsyncQueueImpl {
      tail: [Promise],
      retryableOps: [],
      _isShuttingDown: false,
      delayedOperations: [],
      failure: null,
      operationInProgress: false,
      skipNonRestrictedTasks: false,
      timerIdsToSkip: [],
      backoff: [ExponentialBackoff],
      visibilityHandler: [Function (anonymous)]
    },
    databaseInfo: DatabaseInfo {
      databaseId: [DatabaseId],
      appId: '1:637780255326:web:9fe24afc83358d770f0acf',
      persistenceKey: '[DEFAULT]',
      host: 'firestore.googleapis.com',
      ssl: true,
      forceLongPolling: false,
      autoDetectLongPolling: true,
      longPollingOptions: {},
      useFetchStreams: true
    },
    user: User { uid: null },
    clientId: 'Q75QxzEriyVAF78dO03K',
    authCredentialListener: [Function (anonymous)],
    appCheckCredentialListener: [Function (anonymous)]
  }
}
Listening on port 3000
body:  {
  app_permissions: '562949953421311',
  application_id: '1197181113131610163',
  channel: {
    flags: 0,
    guild_id: '1197187451232473170',
    id: '1197187980796907571',
    last_message_id: '1201540565720895548',
    last_pin_timestamp: '2024-01-25T17:24:57+00:00',
    name: 'testes',
    nsfw: false,
    parent_id: '1197187452331372645',
    permissions: '562949953421311',
    position: 2,
    rate_limit_per_user: 0,
    topic: null,
    type: 0
  },
  channel_id: '1197187980796907571',
  data: { id: '1200113697557844029', name: 'test-user', type: 1 },
  entitlement_sku_ids: [],
  entitlements: [],
  guild: { features: [], id: '1197187451232473170', locale: 'en-US' },
  guild_id: '1197187451232473170',
  guild_locale: 'en-US',
  id: '1201543129875108052',
  locale: 'pt-BR',
  member: {
    avatar: null,
    communication_disabled_until: null,
    deaf: false,
    flags: 0,
    joined_at: '2024-01-17T14:35:31.079000+00:00',
    mute: false,
    nick: null,
    pending: false,
    permissions: '562949953421311',
    premium_since: null,
    roles: [ '1197584431360262144' ],
    unusual_dm_activity_until: null,
    user: {
      avatar: '497937533d4a63f607fd4451fda5e2e7',
      avatar_decoration_data: null,
      discriminator: '0',
      global_name: 'Guilherme Pacianotto',
      id: '1101893185652928613',
      public_flags: 0,
      username: 'guilhermedeaguiarpacianotto'
    }
  },
  token: 'aW50ZXJhY3Rpb246MTIwMTU0MzEyOTg3NTEwODA1MjowVnBJOXdwbEhFNjgxS1hpeXNWamFhazRTdzVRaFZaandMcHZ2R3lmeUhyM25DVE5VNDZaOTZuN2luNnFOYnYyZkRiQXYySWJSNGVsWFV0NVZ5VzhDVkNoNlpUQldLZ0JHSjFjUTI5YWVKWk5hMDExTlZrRG1YZG9kRjd4TlVpdg',
  type: 2,
  version: 1
}
{
  id: '1197187451232473170',
  name: 'Teste de bots',
  icon: null,
  description: null,
  home_header: null,
  splash: null,
  discovery_splash: null,
  features: [],
  banner: null,
  owner_id: '1101893185652928613',
  application_id: null,
  region: 'south-korea',
  afk_channel_id: null,
  afk_timeout: 300,
  system_channel_id: '1197187452331372647',
  system_channel_flags: 0,
  widget_enabled: false,
  widget_channel_id: null,
  verification_level: 0,
  roles: [
    {
      id: '1197187451232473170',
      name: '@everyone',
      description: null,
      permissions: '559623605571137',
      position: 0,
      color: 0,
      hoist: false,
      managed: false,
      mentionable: false,
      icon: null,
      unicode_emoji: null,
      flags: 0
    },
    {
      id: '1197584431360262144',
      name: 'Dev',
      description: null,
      permissions: '8',
      position: 1,
      color: 10181046,
      hoist: false,
      managed: false,
      mentionable: false,
      icon: null,
      unicode_emoji: null,
      flags: 0
    },
    {
      id: '1199041011708608605',
      name: 'IsServerDown',
      description: null,
      permissions: '8',
      position: 1,
      color: 0,
      hoist: false,
      managed: true,
      mentionable: false,
      icon: null,
      unicode_emoji: null,
      tags: [Object],
      flags: 0
    }
  ],
  default_message_notifications: 0,
  mfa_level: 0,
  explicit_content_filter: 0,
  max_presences: null,
  max_members: 500000,
  max_stage_video_channel_users: 50,
  max_video_channel_users: 25,
  vanity_url_code: null,
  premium_tier: 0,
  premium_subscription_count: 0,
  preferred_locale: 'en-US',
  rules_channel_id: null,
  safety_alerts_channel_id: null,
  public_updates_channel_id: null,
  hub_type: null,
  premium_progress_bar_enabled: false,
  latest_onboarding_question_id: null,
  nsfw: false,
  nsfw_level: 0,
  emojis: [],
  stickers: [],
  incidents_data: null,
  inventory_settings: null,
  embed_enabled: false,
  embed_channel_id: null
}
content:  {
	"id": "1197187451232473170",
	"name": "Teste de bots",
	"icon": null,
	"description": null,
	"home_header": null,
	"splash": null,
	"discovery_splash": null,
	"features": [],
	"banner": null,
	"owner_id": "1101893185652928613",
	"application_id": null,
	"region": "south-korea",
	"afk_channel_id": null,
	"afk_timeout": 300,
	"system_channel_id": "1197187452331372647",
	"system_channel_flags": 0,
	"widget_enabled": false,
	"widget_channel_id": null,
	"verification_level": 0,
	"roles": [
		{
			"id": "1197187451232473170",
			"name": "@everyone",
			"description": null,
			"permissions": "559623605571137",
			"position": 0,
			"color": 0,
			"hoist": false,
			"managed": false,
			"mentionable": false,
			"icon": null,
			"unicode_emoji": null,
			"flags": 0
		},
		{
			"id": "1197584431360262144",
			"name": "Dev",
			"description": null,
			"permissions": "8",
			"position": 1,
			"color": 10181046,
			"hoist": false,
			"managed": false,
			"mentionable": false,
			"icon": null,
			"unicode_emoji": null,
			"flags": 0
		},
		{
			"id": "1199041011708608605",
			"name": "IsServerDown",
			"description": null,
			"permissions": "8",
			"position": 1,
			"color": 0,
			"hoist": false,
			"managed": true,
			"mentionable": false,
			"icon": null,
			"unicode_emoji": null,
			"tags": {
				"bot_id": "1197181113131610163"
			},
			"flags": 0
		}
	],
	"default_message_notifications": 0,
	"mfa_level": 0,
	"explicit_content_filter": 0,
	"max_presences": null,
	"max_members": 500000,
	"max_stage_video_channel_users": 50,
	"max_video_channel_users": 25,
	"vanity_url_code": null,
	"premium_tier": 0,
	"premium_subscription_count": 0,
	"preferred_locale": "en-US",
	"rules_channel_id": null,
	"safety_alerts_channel_id": null,
	"public_updates_channel_id": null,
	"hub_type": null,
	"premium_progress_bar_enabled": false,
	"latest_onboarding_question_id": null,
	"nsfw": false,
	"nsfw_level": 0,
	"emojis": [],
	"stickers": [],
	"incidents_data": null,
	"inventory_settings": null,
	"embed_enabled": false,
	"embed_channel_id": null
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node app.js`[39m
Firebase connected:  FirebaseAppImpl {
  _isDeleted: false,
  _options: {
    apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
    authDomain: 'bot-is-server-down.firebaseapp.com',
    projectId: 'bot-is-server-down',
    storageBucket: 'bot-is-server-down.appspot.com',
    messagingSenderId: '637780255326',
    appId: '1:637780255326:web:9fe24afc83358d770f0acf'
  },
  _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
  _name: '[DEFAULT]',
  _automaticDataCollectionEnabled: false,
  _container: ComponentContainer {
    name: '[DEFAULT]',
    providers: Map(10) {
      'platform-logger' => [Provider],
      'heartbeat' => [Provider],
      'fire-core-version' => [Provider],
      'fire-core-esm2017-version' => [Provider],
      'fire-js-version' => [Provider],
      'fire-js-all-app-version' => [Provider],
      'firestore' => [Provider],
      'fire-fst-node-version' => [Provider],
      'fire-fst-esm2017-version' => [Provider],
      'app' => [Provider]
    }
  }
}
firestore intialized:  Firestore {
  _authCredentials: FirebaseAuthCredentialsProvider {
    authProvider: Provider {
      name: 'auth-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    currentUser: User { uid: null },
    tokenCounter: 0,
    forceRefresh: false,
    auth: null,
    tokenListener: [Function (anonymous)]
  },
  _appCheckCredentials: FirebaseAppCheckTokenProvider {
    appCheckProvider: Provider {
      name: 'app-check-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    forceRefresh: false,
    appCheck: null,
    latestAppCheckToken: null,
    tokenListener: [Function (anonymous)]
  },
  _databaseId: DatabaseId { projectId: 'bot-is-server-down', database: '(default)' },
  _app: FirebaseAppImpl {
    _isDeleted: false,
    _options: {
      apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
      authDomain: 'bot-is-server-down.firebaseapp.com',
      projectId: 'bot-is-server-down',
      storageBucket: 'bot-is-server-down.appspot.com',
      messagingSenderId: '637780255326',
      appId: '1:637780255326:web:9fe24afc83358d770f0acf'
    },
    _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
    _name: '[DEFAULT]',
    _automaticDataCollectionEnabled: false,
    _container: ComponentContainer { name: '[DEFAULT]', providers: [Map] }
  },
  type: 'firestore',
  _persistenceKey: '[DEFAULT]',
  _settings: FirestoreSettingsImpl {
    host: 'firestore.googleapis.com',
    ssl: true,
    credentials: undefined,
    ignoreUndefinedProperties: false,
    localCache: undefined,
    cacheSizeBytes: 41943040,
    experimentalForceLongPolling: false,
    experimentalAutoDetectLongPolling: true,
    experimentalLongPollingOptions: {},
    useFetchStreams: true
  },
  _settingsFrozen: true,
  _queue: <ref *1> AsyncQueueImpl {
    tail: Promise { <pending> },
    retryableOps: [],
    _isShuttingDown: false,
    delayedOperations: [],
    failure: null,
    operationInProgress: false,
    skipNonRestrictedTasks: false,
    timerIdsToSkip: [],
    backoff: ExponentialBackoff {
      queue: [Circular *1],
      timerId: 'async_queue_retry',
      initialDelayMs: 1000,
      backoffFactor: 1.5,
      maxDelayMs: 60000,
      currentBaseMs: 0,
      timerPromise: null,
      lastAttemptTime: 1706540640837
    },
    visibilityHandler: [Function (anonymous)]
  },
  _firestoreClient: FirestoreClient {
    authCredentials: FirebaseAuthCredentialsProvider {
      authProvider: [Provider],
      currentUser: [User],
      tokenCounter: 0,
      forceRefresh: false,
      auth: null,
      tokenListener: [Function (anonymous)]
    },
    appCheckCredentials: FirebaseAppCheckTokenProvider {
      appCheckProvider: [Provider],
      forceRefresh: false,
      appCheck: null,
      latestAppCheckToken: null,
      tokenListener: [Function (anonymous)]
    },
    asyncQueue: <ref *1> AsyncQueueImpl {
      tail: [Promise],
      retryableOps: [],
      _isShuttingDown: false,
      delayedOperations: [],
      failure: null,
      operationInProgress: false,
      skipNonRestrictedTasks: false,
      timerIdsToSkip: [],
      backoff: [ExponentialBackoff],
      visibilityHandler: [Function (anonymous)]
    },
    databaseInfo: DatabaseInfo {
      databaseId: [DatabaseId],
      appId: '1:637780255326:web:9fe24afc83358d770f0acf',
      persistenceKey: '[DEFAULT]',
      host: 'firestore.googleapis.com',
      ssl: true,
      forceLongPolling: false,
      autoDetectLongPolling: true,
      longPollingOptions: {},
      useFetchStreams: true
    },
    user: User { uid: null },
    clientId: 'iwF41MwoURDy7fHybTuW',
    authCredentialListener: [Function (anonymous)],
    appCheckCredentialListener: [Function (anonymous)]
  }
}
Listening on port 3000
body:  {
  app_permissions: '562949953421311',
  application_id: '1197181113131610163',
  channel: {
    flags: 0,
    guild_id: '1197187451232473170',
    id: '1197187980796907571',
    last_message_id: '1201540565720895548',
    last_pin_timestamp: '2024-01-25T17:24:57+00:00',
    name: 'testes',
    nsfw: false,
    parent_id: '1197187452331372645',
    permissions: '562949953421311',
    position: 2,
    rate_limit_per_user: 0,
    topic: null,
    type: 0
  },
  channel_id: '1197187980796907571',
  data: { id: '1200113697557844029', name: 'test-user', type: 1 },
  entitlement_sku_ids: [],
  entitlements: [],
  guild: { features: [], id: '1197187451232473170', locale: 'en-US' },
  guild_id: '1197187451232473170',
  guild_locale: 'en-US',
  id: '1201543450835812512',
  locale: 'pt-BR',
  member: {
    avatar: null,
    communication_disabled_until: null,
    deaf: false,
    flags: 0,
    joined_at: '2024-01-17T14:35:31.079000+00:00',
    mute: false,
    nick: null,
    pending: false,
    permissions: '562949953421311',
    premium_since: null,
    roles: [ '1197584431360262144' ],
    unusual_dm_activity_until: null,
    user: {
      avatar: '497937533d4a63f607fd4451fda5e2e7',
      avatar_decoration_data: null,
      discriminator: '0',
      global_name: 'Guilherme Pacianotto',
      id: '1101893185652928613',
      public_flags: 0,
      username: 'guilhermedeaguiarpacianotto'
    }
  },
  token: 'aW50ZXJhY3Rpb246MTIwMTU0MzQ1MDgzNTgxMjUxMjpOcG9JMWxjdnlBclN0VFNuQWI0MU0wWGVqdTJ6MUM5NU0zRzJNODhRMEZjeU1nOTNYWG85Q2E3ZFE1MHdYdHpCMVI5cUdPNE9XY1NiSFlzOU1sZHZmSkdSRlNSWVU3QzhXcGZlTkFuOHVGelFTQ0IzZk4yUzdKdFZ6a3lDSXZYcw',
  type: 2,
  version: 1
}
{
  id: '1197187451232473170',
  name: 'Teste de bots',
  icon: null,
  description: null,
  home_header: null,
  splash: null,
  discovery_splash: null,
  features: [],
  banner: null,
  owner_id: '1101893185652928613',
  application_id: null,
  region: 'south-korea',
  afk_channel_id: null,
  afk_timeout: 300,
  system_channel_id: '1197187452331372647',
  system_channel_flags: 0,
  widget_enabled: false,
  widget_channel_id: null,
  verification_level: 0,
  roles: [
    {
      id: '1197187451232473170',
      name: '@everyone',
      description: null,
      permissions: '559623605571137',
      position: 0,
      color: 0,
      hoist: false,
      managed: false,
      mentionable: false,
      icon: null,
      unicode_emoji: null,
      flags: 0
    },
    {
      id: '1197584431360262144',
      name: 'Dev',
      description: null,
      permissions: '8',
      position: 1,
      color: 10181046,
      hoist: false,
      managed: false,
      mentionable: false,
      icon: null,
      unicode_emoji: null,
      flags: 0
    },
    {
      id: '1199041011708608605',
      name: 'IsServerDown',
      description: null,
      permissions: '8',
      position: 1,
      color: 0,
      hoist: false,
      managed: true,
      mentionable: false,
      icon: null,
      unicode_emoji: null,
      tags: [Object],
      flags: 0
    }
  ],
  default_message_notifications: 0,
  mfa_level: 0,
  explicit_content_filter: 0,
  max_presences: null,
  max_members: 500000,
  max_stage_video_channel_users: 50,
  max_video_channel_users: 25,
  vanity_url_code: null,
  premium_tier: 0,
  premium_subscription_count: 0,
  preferred_locale: 'en-US',
  rules_channel_id: null,
  safety_alerts_channel_id: null,
  public_updates_channel_id: null,
  hub_type: null,
  premium_progress_bar_enabled: false,
  latest_onboarding_question_id: null,
  nsfw: false,
  nsfw_level: 0,
  emojis: [],
  stickers: [],
  incidents_data: null,
  inventory_settings: null,
  embed_enabled: false,
  embed_channel_id: null
}
content:  {
	"id": "1197187451232473170",
	"name": "Teste de bots",
	"icon": null,
	"description": null,
	"home_header": null,
	"splash": null,
	"discovery_splash": null,
	"features": [],
	"banner": null,
	"owner_id": "1101893185652928613",
	"application_id": null,
	"region": "south-korea",
	"afk_channel_id": null,
	"afk_timeout": 300,
	"system_channel_id": "1197187452331372647",
	"system_channel_flags": 0,
	"widget_enabled": false,
	"widget_channel_id": null,
	"verification_level": 0,
	"roles": [
		{
			"id": "1197187451232473170",
			"name": "@everyone",
			"description": null,
			"permissions": "559623605571137",
			"position": 0,
			"color": 0,
			"hoist": false,
			"managed": false,
			"mentionable": false,
			"icon": null,
			"unicode_emoji": null,
			"flags": 0
		},
		{
			"id": "1197584431360262144",
			"name": "Dev",
			"description": null,
			"permissions": "8",
			"position": 1,
			"color": 10181046,
			"hoist": false,
			"managed": false,
			"mentionable": false,
			"icon": null,
			"unicode_emoji": null,
			"flags": 0
		},
		{
			"id": "1199041011708608605",
			"name": "IsServerDown",
			"description": null,
			"permissions": "8",
			"position": 1,
			"color": 0,
			"hoist": false,
			"managed": true,
			"mentionable": false,
			"icon": null,
			"unicode_emoji": null,
			"tags": {
				"bot_id": "1197181113131610163"
			},
			"flags": 0
		}
	],
	"default_message_notifications": 0,
	"mfa_level": 0,
	"explicit_content_filter": 0,
	"max_presences": null,
	"max_members": 500000,
	"max_stage_video_channel_users": 50,
	"max_video_channel_users": 25,
	"vanity_url_code": null,
	"premium_tier": 0,
	"premium_subscription_count": 0,
	"preferred_locale": "en-US",
	"rules_channel_id": null,
	"safety_alerts_channel_id": null,
	"public_updates_channel_id": null,
	"hub_type": null,
	"premium_progress_bar_enabled": false,
	"latest_onboarding_question_id": null,
	"nsfw": false,
	"nsfw_level": 0,
	"emojis": [],
	"stickers": [],
	"incidents_data": null,
	"inventory_settings": null,
	"embed_enabled": false,
	"embed_channel_id": null
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node app.js`[39m
Firebase connected:  FirebaseAppImpl {
  _isDeleted: false,
  _options: {
    apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
    authDomain: 'bot-is-server-down.firebaseapp.com',
    projectId: 'bot-is-server-down',
    storageBucket: 'bot-is-server-down.appspot.com',
    messagingSenderId: '637780255326',
    appId: '1:637780255326:web:9fe24afc83358d770f0acf'
  },
  _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
  _name: '[DEFAULT]',
  _automaticDataCollectionEnabled: false,
  _container: ComponentContainer {
    name: '[DEFAULT]',
    providers: Map(10) {
      'platform-logger' => [Provider],
      'heartbeat' => [Provider],
      'fire-core-version' => [Provider],
      'fire-core-esm2017-version' => [Provider],
      'fire-js-version' => [Provider],
      'fire-js-all-app-version' => [Provider],
      'firestore' => [Provider],
      'fire-fst-node-version' => [Provider],
      'fire-fst-esm2017-version' => [Provider],
      'app' => [Provider]
    }
  }
}
firestore intialized:  Firestore {
  _authCredentials: FirebaseAuthCredentialsProvider {
    authProvider: Provider {
      name: 'auth-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    currentUser: User { uid: null },
    tokenCounter: 0,
    forceRefresh: false,
    auth: null,
    tokenListener: [Function (anonymous)]
  },
  _appCheckCredentials: FirebaseAppCheckTokenProvider {
    appCheckProvider: Provider {
      name: 'app-check-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    forceRefresh: false,
    appCheck: null,
    latestAppCheckToken: null,
    tokenListener: [Function (anonymous)]
  },
  _databaseId: DatabaseId { projectId: 'bot-is-server-down', database: '(default)' },
  _app: FirebaseAppImpl {
    _isDeleted: false,
    _options: {
      apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
      authDomain: 'bot-is-server-down.firebaseapp.com',
      projectId: 'bot-is-server-down',
      storageBucket: 'bot-is-server-down.appspot.com',
      messagingSenderId: '637780255326',
      appId: '1:637780255326:web:9fe24afc83358d770f0acf'
    },
    _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
    _name: '[DEFAULT]',
    _automaticDataCollectionEnabled: false,
    _container: ComponentContainer { name: '[DEFAULT]', providers: [Map] }
  },
  type: 'firestore',
  _persistenceKey: '[DEFAULT]',
  _settings: FirestoreSettingsImpl {
    host: 'firestore.googleapis.com',
    ssl: true,
    credentials: undefined,
    ignoreUndefinedProperties: false,
    localCache: undefined,
    cacheSizeBytes: 41943040,
    experimentalForceLongPolling: false,
    experimentalAutoDetectLongPolling: true,
    experimentalLongPollingOptions: {},
    useFetchStreams: true
  },
  _settingsFrozen: true,
  _queue: <ref *1> AsyncQueueImpl {
    tail: Promise { <pending> },
    retryableOps: [],
    _isShuttingDown: false,
    delayedOperations: [],
    failure: null,
    operationInProgress: false,
    skipNonRestrictedTasks: false,
    timerIdsToSkip: [],
    backoff: ExponentialBackoff {
      queue: [Circular *1],
      timerId: 'async_queue_retry',
      initialDelayMs: 1000,
      backoffFactor: 1.5,
      maxDelayMs: 60000,
      currentBaseMs: 0,
      timerPromise: null,
      lastAttemptTime: 1706540687692
    },
    visibilityHandler: [Function (anonymous)]
  },
  _firestoreClient: FirestoreClient {
    authCredentials: FirebaseAuthCredentialsProvider {
      authProvider: [Provider],
      currentUser: [User],
      tokenCounter: 0,
      forceRefresh: false,
      auth: null,
      tokenListener: [Function (anonymous)]
    },
    appCheckCredentials: FirebaseAppCheckTokenProvider {
      appCheckProvider: [Provider],
      forceRefresh: false,
      appCheck: null,
      latestAppCheckToken: null,
      tokenListener: [Function (anonymous)]
    },
    asyncQueue: <ref *1> AsyncQueueImpl {
      tail: [Promise],
      retryableOps: [],
      _isShuttingDown: false,
      delayedOperations: [],
      failure: null,
      operationInProgress: false,
      skipNonRestrictedTasks: false,
      timerIdsToSkip: [],
      backoff: [ExponentialBackoff],
      visibilityHandler: [Function (anonymous)]
    },
    databaseInfo: DatabaseInfo {
      databaseId: [DatabaseId],
      appId: '1:637780255326:web:9fe24afc83358d770f0acf',
      persistenceKey: '[DEFAULT]',
      host: 'firestore.googleapis.com',
      ssl: true,
      forceLongPolling: false,
      autoDetectLongPolling: true,
      longPollingOptions: {},
      useFetchStreams: true
    },
    user: User { uid: null },
    clientId: 'FRqFHeDHbOqXxS86ZbLR',
    authCredentialListener: [Function (anonymous)],
    appCheckCredentialListener: [Function (anonymous)]
  }
}
Listening on port 3000
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node app.js`[39m
Firebase connected:  FirebaseAppImpl {
  _isDeleted: false,
  _options: {
    apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
    authDomain: 'bot-is-server-down.firebaseapp.com',
    projectId: 'bot-is-server-down',
    storageBucket: 'bot-is-server-down.appspot.com',
    messagingSenderId: '637780255326',
    appId: '1:637780255326:web:9fe24afc83358d770f0acf'
  },
  _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
  _name: '[DEFAULT]',
  _automaticDataCollectionEnabled: false,
  _container: ComponentContainer {
    name: '[DEFAULT]',
    providers: Map(10) {
      'platform-logger' => [Provider],
      'heartbeat' => [Provider],
      'fire-core-version' => [Provider],
      'fire-core-esm2017-version' => [Provider],
      'fire-js-version' => [Provider],
      'fire-js-all-app-version' => [Provider],
      'firestore' => [Provider],
      'fire-fst-node-version' => [Provider],
      'fire-fst-esm2017-version' => [Provider],
      'app' => [Provider]
    }
  }
}
firestore intialized:  Firestore {
  _authCredentials: FirebaseAuthCredentialsProvider {
    authProvider: Provider {
      name: 'auth-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    currentUser: User { uid: null },
    tokenCounter: 0,
    forceRefresh: false,
    auth: null,
    tokenListener: [Function (anonymous)]
  },
  _appCheckCredentials: FirebaseAppCheckTokenProvider {
    appCheckProvider: Provider {
      name: 'app-check-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    forceRefresh: false,
    appCheck: null,
    latestAppCheckToken: null,
    tokenListener: [Function (anonymous)]
  },
  _databaseId: DatabaseId { projectId: 'bot-is-server-down', database: '(default)' },
  _app: FirebaseAppImpl {
    _isDeleted: false,
    _options: {
      apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
      authDomain: 'bot-is-server-down.firebaseapp.com',
      projectId: 'bot-is-server-down',
      storageBucket: 'bot-is-server-down.appspot.com',
      messagingSenderId: '637780255326',
      appId: '1:637780255326:web:9fe24afc83358d770f0acf'
    },
    _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
    _name: '[DEFAULT]',
    _automaticDataCollectionEnabled: false,
    _container: ComponentContainer { name: '[DEFAULT]', providers: [Map] }
  },
  type: 'firestore',
  _persistenceKey: '[DEFAULT]',
  _settings: FirestoreSettingsImpl {
    host: 'firestore.googleapis.com',
    ssl: true,
    credentials: undefined,
    ignoreUndefinedProperties: false,
    localCache: undefined,
    cacheSizeBytes: 41943040,
    experimentalForceLongPolling: false,
    experimentalAutoDetectLongPolling: true,
    experimentalLongPollingOptions: {},
    useFetchStreams: true
  },
  _settingsFrozen: true,
  _queue: <ref *1> AsyncQueueImpl {
    tail: Promise { <pending> },
    retryableOps: [],
    _isShuttingDown: false,
    delayedOperations: [],
    failure: null,
    operationInProgress: false,
    skipNonRestrictedTasks: false,
    timerIdsToSkip: [],
    backoff: ExponentialBackoff {
      queue: [Circular *1],
      timerId: 'async_queue_retry',
      initialDelayMs: 1000,
      backoffFactor: 1.5,
      maxDelayMs: 60000,
      currentBaseMs: 0,
      timerPromise: null,
      lastAttemptTime: 1706540765237
    },
    visibilityHandler: [Function (anonymous)]
  },
  _firestoreClient: FirestoreClient {
    authCredentials: FirebaseAuthCredentialsProvider {
      authProvider: [Provider],
      currentUser: [User],
      tokenCounter: 0,
      forceRefresh: false,
      auth: null,
      tokenListener: [Function (anonymous)]
    },
    appCheckCredentials: FirebaseAppCheckTokenProvider {
      appCheckProvider: [Provider],
      forceRefresh: false,
      appCheck: null,
      latestAppCheckToken: null,
      tokenListener: [Function (anonymous)]
    },
    asyncQueue: <ref *1> AsyncQueueImpl {
      tail: [Promise],
      retryableOps: [],
      _isShuttingDown: false,
      delayedOperations: [],
      failure: null,
      operationInProgress: false,
      skipNonRestrictedTasks: false,
      timerIdsToSkip: [],
      backoff: [ExponentialBackoff],
      visibilityHandler: [Function (anonymous)]
    },
    databaseInfo: DatabaseInfo {
      databaseId: [DatabaseId],
      appId: '1:637780255326:web:9fe24afc83358d770f0acf',
      persistenceKey: '[DEFAULT]',
      host: 'firestore.googleapis.com',
      ssl: true,
      forceLongPolling: false,
      autoDetectLongPolling: true,
      longPollingOptions: {},
      useFetchStreams: true
    },
    user: User { uid: null },
    clientId: '8XKu47fmwlfL34KKqyTG',
    authCredentialListener: [Function (anonymous)],
    appCheckCredentialListener: [Function (anonymous)]
  }
}
Listening on port 3000
body:  {
  app_permissions: '562949953421311',
  application_id: '1197181113131610163',
  channel: {
    flags: 0,
    guild_id: '1197187451232473170',
    id: '1197187980796907571',
    last_message_id: '1201540565720895548',
    last_pin_timestamp: '2024-01-25T17:24:57+00:00',
    name: 'testes',
    nsfw: false,
    parent_id: '1197187452331372645',
    permissions: '562949953421311',
    position: 2,
    rate_limit_per_user: 0,
    topic: null,
    type: 0
  },
  channel_id: '1197187980796907571',
  data: { id: '1200113697557844029', name: 'test-user', type: 1 },
  entitlement_sku_ids: [],
  entitlements: [],
  guild: { features: [], id: '1197187451232473170', locale: 'en-US' },
  guild_id: '1197187451232473170',
  guild_locale: 'en-US',
  id: '1201543837751984238',
  locale: 'pt-BR',
  member: {
    avatar: null,
    communication_disabled_until: null,
    deaf: false,
    flags: 0,
    joined_at: '2024-01-17T14:35:31.079000+00:00',
    mute: false,
    nick: null,
    pending: false,
    permissions: '562949953421311',
    premium_since: null,
    roles: [ '1197584431360262144' ],
    unusual_dm_activity_until: null,
    user: {
      avatar: '497937533d4a63f607fd4451fda5e2e7',
      avatar_decoration_data: null,
      discriminator: '0',
      global_name: 'Guilherme Pacianotto',
      id: '1101893185652928613',
      public_flags: 0,
      username: 'guilhermedeaguiarpacianotto'
    }
  },
  token: 'aW50ZXJhY3Rpb246MTIwMTU0MzgzNzc1MTk4NDIzODo0RVN0cmhwbkU0Z1NGQW5aenNNMVhIVmFlNWhtM21LS1plcFVwV25FNkp6dVkzUjFEZVowZDRxMGpOQmk2Zlc1ejU3UTJzbVpsSG54Nkd5QjBza3JRM3B6bGJOT3VkdDBsT1ByV1VrNkU5R214enZ1NldZNTlJT3lmZlF3MXNqbA',
  type: 2,
  version: 1
}
body:  {
  application_id: '1197181113131610163',
  entitlements: [],
  id: '1201543838087528458',
  token: 'aW50ZXJhY3Rpb246MTIwMTU0MzgzODA4NzUyODQ1ODpKU2x2V1ltUTBlOWdudjY5S0o5UmZvNmtLNkNZdks3cUt6STZTNnV2R0xnZVRLdktzVFlnMWsxMFFtQThKeEVITU5IMTZpclBvTDBMMWc1MkszMEJmU0h0MDJvYk8xYWI4cVdkTXJvRklmMkVhQjdQM3B2b2E2dUpWNUZPTTFFYg',
  type: 1,
  user: {
    avatar: 'c6a249645d46209f337279cd2ca998c7',
    avatar_decoration_data: null,
    bot: true,
    discriminator: '0000',
    global_name: 'Discord',
    id: '643945264868098049',
    public_flags: 1,
    system: true,
    username: 'discord'
  },
  version: 1
}
{
  id: '1197187451232473170',
  name: 'Teste de bots',
  icon: null,
  description: null,
  home_header: null,
  splash: null,
  discovery_splash: null,
  features: [],
  banner: null,
  owner_id: '1101893185652928613',
  application_id: null,
  region: 'south-korea',
  afk_channel_id: null,
  afk_timeout: 300,
  system_channel_id: '1197187452331372647',
  system_channel_flags: 0,
  widget_enabled: false,
  widget_channel_id: null,
  verification_level: 0,
  roles: [
    {
      id: '1197187451232473170',
      name: '@everyone',
      description: null,
      permissions: '559623605571137',
      position: 0,
      color: 0,
      hoist: false,
      managed: false,
      mentionable: false,
      icon: null,
      unicode_emoji: null,
      flags: 0
    },
    {
      id: '1197584431360262144',
      name: 'Dev',
      description: null,
      permissions: '8',
      position: 1,
      color: 10181046,
      hoist: false,
      managed: false,
      mentionable: false,
      icon: null,
      unicode_emoji: null,
      flags: 0
    },
    {
      id: '1199041011708608605',
      name: 'IsServerDown',
      description: null,
      permissions: '8',
      position: 1,
      color: 0,
      hoist: false,
      managed: true,
      mentionable: false,
      icon: null,
      unicode_emoji: null,
      tags: [Object],
      flags: 0
    }
  ],
  default_message_notifications: 0,
  mfa_level: 0,
  explicit_content_filter: 0,
  max_presences: null,
  max_members: 500000,
  max_stage_video_channel_users: 50,
  max_video_channel_users: 25,
  vanity_url_code: null,
  premium_tier: 0,
  premium_subscription_count: 0,
  preferred_locale: 'en-US',
  rules_channel_id: null,
  safety_alerts_channel_id: null,
  public_updates_channel_id: null,
  hub_type: null,
  premium_progress_bar_enabled: false,
  latest_onboarding_question_id: null,
  nsfw: false,
  nsfw_level: 0,
  emojis: [],
  stickers: [],
  incidents_data: null,
  inventory_settings: null,
  embed_enabled: false,
  embed_channel_id: null
}
content:  [
	{
		"id": "1197187451232473170",
		"name": "@everyone",
		"description": null,
		"permissions": "559623605571137",
		"position": 0,
		"color": 0,
		"hoist": false,
		"managed": false,
		"mentionable": false,
		"icon": null,
		"unicode_emoji": null,
		"flags": 0
	},
	{
		"id": "1197584431360262144",
		"name": "Dev",
		"description": null,
		"permissions": "8",
		"position": 1,
		"color": 10181046,
		"hoist": false,
		"managed": false,
		"mentionable": false,
		"icon": null,
		"unicode_emoji": null,
		"flags": 0
	},
	{
		"id": "1199041011708608605",
		"name": "IsServerDown",
		"description": null,
		"permissions": "8",
		"position": 1,
		"color": 0,
		"hoist": false,
		"managed": true,
		"mentionable": false,
		"icon": null,
		"unicode_emoji": null,
		"tags": {
			"bot_id": "1197181113131610163"
		},
		"flags": 0
	}
]
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node app.js`[39m
Firebase connected:  FirebaseAppImpl {
  _isDeleted: false,
  _options: {
    apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
    authDomain: 'bot-is-server-down.firebaseapp.com',
    projectId: 'bot-is-server-down',
    storageBucket: 'bot-is-server-down.appspot.com',
    messagingSenderId: '637780255326',
    appId: '1:637780255326:web:9fe24afc83358d770f0acf'
  },
  _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
  _name: '[DEFAULT]',
  _automaticDataCollectionEnabled: false,
  _container: ComponentContainer {
    name: '[DEFAULT]',
    providers: Map(10) {
      'platform-logger' => [Provider],
      'heartbeat' => [Provider],
      'fire-core-version' => [Provider],
      'fire-core-esm2017-version' => [Provider],
      'fire-js-version' => [Provider],
      'fire-js-all-app-version' => [Provider],
      'firestore' => [Provider],
      'fire-fst-node-version' => [Provider],
      'fire-fst-esm2017-version' => [Provider],
      'app' => [Provider]
    }
  }
}
firestore intialized:  Firestore {
  _authCredentials: FirebaseAuthCredentialsProvider {
    authProvider: Provider {
      name: 'auth-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    currentUser: User { uid: null },
    tokenCounter: 0,
    forceRefresh: false,
    auth: null,
    tokenListener: [Function (anonymous)]
  },
  _appCheckCredentials: FirebaseAppCheckTokenProvider {
    appCheckProvider: Provider {
      name: 'app-check-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    forceRefresh: false,
    appCheck: null,
    latestAppCheckToken: null,
    tokenListener: [Function (anonymous)]
  },
  _databaseId: DatabaseId { projectId: 'bot-is-server-down', database: '(default)' },
  _app: FirebaseAppImpl {
    _isDeleted: false,
    _options: {
      apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
      authDomain: 'bot-is-server-down.firebaseapp.com',
      projectId: 'bot-is-server-down',
      storageBucket: 'bot-is-server-down.appspot.com',
      messagingSenderId: '637780255326',
      appId: '1:637780255326:web:9fe24afc83358d770f0acf'
    },
    _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
    _name: '[DEFAULT]',
    _automaticDataCollectionEnabled: false,
    _container: ComponentContainer { name: '[DEFAULT]', providers: [Map] }
  },
  type: 'firestore',
  _persistenceKey: '[DEFAULT]',
  _settings: FirestoreSettingsImpl {
    host: 'firestore.googleapis.com',
    ssl: true,
    credentials: undefined,
    ignoreUndefinedProperties: false,
    localCache: undefined,
    cacheSizeBytes: 41943040,
    experimentalForceLongPolling: false,
    experimentalAutoDetectLongPolling: true,
    experimentalLongPollingOptions: {},
    useFetchStreams: true
  },
  _settingsFrozen: true,
  _queue: <ref *1> AsyncQueueImpl {
    tail: Promise { <pending> },
    retryableOps: [],
    _isShuttingDown: false,
    delayedOperations: [],
    failure: null,
    operationInProgress: false,
    skipNonRestrictedTasks: false,
    timerIdsToSkip: [],
    backoff: ExponentialBackoff {
      queue: [Circular *1],
      timerId: 'async_queue_retry',
      initialDelayMs: 1000,
      backoffFactor: 1.5,
      maxDelayMs: 60000,
      currentBaseMs: 0,
      timerPromise: null,
      lastAttemptTime: 1706540789156
    },
    visibilityHandler: [Function (anonymous)]
  },
  _firestoreClient: FirestoreClient {
    authCredentials: FirebaseAuthCredentialsProvider {
      authProvider: [Provider],
      currentUser: [User],
      tokenCounter: 0,
      forceRefresh: false,
      auth: null,
      tokenListener: [Function (anonymous)]
    },
    appCheckCredentials: FirebaseAppCheckTokenProvider {
      appCheckProvider: [Provider],
      forceRefresh: false,
      appCheck: null,
      latestAppCheckToken: null,
      tokenListener: [Function (anonymous)]
    },
    asyncQueue: <ref *1> AsyncQueueImpl {
      tail: [Promise],
      retryableOps: [],
      _isShuttingDown: false,
      delayedOperations: [],
      failure: null,
      operationInProgress: false,
      skipNonRestrictedTasks: false,
      timerIdsToSkip: [],
      backoff: [ExponentialBackoff],
      visibilityHandler: [Function (anonymous)]
    },
    databaseInfo: DatabaseInfo {
      databaseId: [DatabaseId],
      appId: '1:637780255326:web:9fe24afc83358d770f0acf',
      persistenceKey: '[DEFAULT]',
      host: 'firestore.googleapis.com',
      ssl: true,
      forceLongPolling: false,
      autoDetectLongPolling: true,
      longPollingOptions: {},
      useFetchStreams: true
    },
    user: User { uid: null },
    clientId: 'R01yIV3gF4XFkELezLAt',
    authCredentialListener: [Function (anonymous)],
    appCheckCredentialListener: [Function (anonymous)]
  }
}
Listening on port 3000
body:  {
  app_permissions: '562949953421311',
  application_id: '1197181113131610163',
  channel: {
    flags: 0,
    guild_id: '1197187451232473170',
    id: '1197187980796907571',
    last_message_id: '1201543841426194533',
    last_pin_timestamp: '2024-01-25T17:24:57+00:00',
    name: 'testes',
    nsfw: false,
    parent_id: '1197187452331372645',
    permissions: '562949953421311',
    position: 2,
    rate_limit_per_user: 0,
    topic: null,
    type: 0
  },
  channel_id: '1197187980796907571',
  data: { id: '1200113697557844029', name: 'test-user', type: 1 },
  entitlement_sku_ids: [],
  entitlements: [],
  guild: { features: [], id: '1197187451232473170', locale: 'en-US' },
  guild_id: '1197187451232473170',
  guild_locale: 'en-US',
  id: '1201543927849816154',
  locale: 'pt-BR',
  member: {
    avatar: null,
    communication_disabled_until: null,
    deaf: false,
    flags: 0,
    joined_at: '2024-01-17T14:35:31.079000+00:00',
    mute: false,
    nick: null,
    pending: false,
    permissions: '562949953421311',
    premium_since: null,
    roles: [ '1197584431360262144' ],
    unusual_dm_activity_until: null,
    user: {
      avatar: '497937533d4a63f607fd4451fda5e2e7',
      avatar_decoration_data: null,
      discriminator: '0',
      global_name: 'Guilherme Pacianotto',
      id: '1101893185652928613',
      public_flags: 0,
      username: 'guilhermedeaguiarpacianotto'
    }
  },
  token: 'aW50ZXJhY3Rpb246MTIwMTU0MzkyNzg0OTgxNjE1NDp6TkVVbnRuenRXeVRyT2ZiRXYwTHhRT2pCdnhkbFlKdklwdmdSeGdkVDdqc1E2dXZtZE1jQzZGR2NocTJKUm5neHg3Q2pOd0pURWZFMlVwWHM5MHhNNDg1azVpTmpyZnJnRkFtY0d0bzJ3M1dTRXExYTJ1d1ZrUjZzM3hVdzdMSg',
  type: 2,
  version: 1
}
{
  id: '1197187451232473170',
  name: 'Teste de bots',
  icon: null,
  description: null,
  home_header: null,
  splash: null,
  discovery_splash: null,
  features: [],
  banner: null,
  owner_id: '1101893185652928613',
  application_id: null,
  region: 'south-korea',
  afk_channel_id: null,
  afk_timeout: 300,
  system_channel_id: '1197187452331372647',
  system_channel_flags: 0,
  widget_enabled: false,
  widget_channel_id: null,
  verification_level: 0,
  roles: [
    {
      id: '1197187451232473170',
      name: '@everyone',
      description: null,
      permissions: '559623605571137',
      position: 0,
      color: 0,
      hoist: false,
      managed: false,
      mentionable: false,
      icon: null,
      unicode_emoji: null,
      flags: 0
    },
    {
      id: '1197584431360262144',
      name: 'Dev',
      description: null,
      permissions: '8',
      position: 1,
      color: 10181046,
      hoist: false,
      managed: false,
      mentionable: false,
      icon: null,
      unicode_emoji: null,
      flags: 0
    },
    {
      id: '1199041011708608605',
      name: 'IsServerDown',
      description: null,
      permissions: '8',
      position: 1,
      color: 0,
      hoist: false,
      managed: true,
      mentionable: false,
      icon: null,
      unicode_emoji: null,
      tags: [Object],
      flags: 0
    }
  ],
  default_message_notifications: 0,
  mfa_level: 0,
  explicit_content_filter: 0,
  max_presences: null,
  max_members: 500000,
  max_stage_video_channel_users: 50,
  max_video_channel_users: 25,
  vanity_url_code: null,
  premium_tier: 0,
  premium_subscription_count: 0,
  preferred_locale: 'en-US',
  rules_channel_id: null,
  safety_alerts_channel_id: null,
  public_updates_channel_id: null,
  hub_type: null,
  premium_progress_bar_enabled: false,
  latest_onboarding_question_id: null,
  nsfw: false,
  nsfw_level: 0,
  emojis: [],
  stickers: [],
  incidents_data: null,
  inventory_settings: null,
  embed_enabled: false,
  embed_channel_id: null
}
content:  [
	{
		"id": "1197187451232473170",
		"name": "@everyone",
		"description": null,
		"permissions": "559623605571137",
		"position": 0,
		"color": 0,
		"hoist": false,
		"managed": false,
		"mentionable": false,
		"icon": null,
		"unicode_emoji": null,
		"flags": 0
	},
	{
		"id": "1197584431360262144",
		"name": "Dev",
		"description": null,
		"permissions": "8",
		"position": 1,
		"color": 10181046,
		"hoist": false,
		"managed": false,
		"mentionable": false,
		"icon": null,
		"unicode_emoji": null,
		"flags": 0
	},
	{
		"id": "1199041011708608605",
		"name": "IsServerDown",
		"description": null,
		"permissions": "8",
		"position": 1,
		"color": 0,
		"hoist": false,
		"managed": true,
		"mentionable": false,
		"icon": null,
		"unicode_emoji": null,
		"tags": {
			"bot_id": "1197181113131610163"
		},
		"flags": 0
	}
]
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node app.js`[39m
Firebase connected:  FirebaseAppImpl {
  _isDeleted: false,
  _options: {
    apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
    authDomain: 'bot-is-server-down.firebaseapp.com',
    projectId: 'bot-is-server-down',
    storageBucket: 'bot-is-server-down.appspot.com',
    messagingSenderId: '637780255326',
    appId: '1:637780255326:web:9fe24afc83358d770f0acf'
  },
  _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
  _name: '[DEFAULT]',
  _automaticDataCollectionEnabled: false,
  _container: ComponentContainer {
    name: '[DEFAULT]',
    providers: Map(10) {
      'platform-logger' => [Provider],
      'heartbeat' => [Provider],
      'fire-core-version' => [Provider],
      'fire-core-esm2017-version' => [Provider],
      'fire-js-version' => [Provider],
      'fire-js-all-app-version' => [Provider],
      'firestore' => [Provider],
      'fire-fst-node-version' => [Provider],
      'fire-fst-esm2017-version' => [Provider],
      'app' => [Provider]
    }
  }
}
firestore intialized:  Firestore {
  _authCredentials: FirebaseAuthCredentialsProvider {
    authProvider: Provider {
      name: 'auth-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    currentUser: User { uid: null },
    tokenCounter: 0,
    forceRefresh: false,
    auth: null,
    tokenListener: [Function (anonymous)]
  },
  _appCheckCredentials: FirebaseAppCheckTokenProvider {
    appCheckProvider: Provider {
      name: 'app-check-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    forceRefresh: false,
    appCheck: null,
    latestAppCheckToken: null,
    tokenListener: [Function (anonymous)]
  },
  _databaseId: DatabaseId { projectId: 'bot-is-server-down', database: '(default)' },
  _app: FirebaseAppImpl {
    _isDeleted: false,
    _options: {
      apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
      authDomain: 'bot-is-server-down.firebaseapp.com',
      projectId: 'bot-is-server-down',
      storageBucket: 'bot-is-server-down.appspot.com',
      messagingSenderId: '637780255326',
      appId: '1:637780255326:web:9fe24afc83358d770f0acf'
    },
    _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
    _name: '[DEFAULT]',
    _automaticDataCollectionEnabled: false,
    _container: ComponentContainer { name: '[DEFAULT]', providers: [Map] }
  },
  type: 'firestore',
  _persistenceKey: '[DEFAULT]',
  _settings: FirestoreSettingsImpl {
    host: 'firestore.googleapis.com',
    ssl: true,
    credentials: undefined,
    ignoreUndefinedProperties: false,
    localCache: undefined,
    cacheSizeBytes: 41943040,
    experimentalForceLongPolling: false,
    experimentalAutoDetectLongPolling: true,
    experimentalLongPollingOptions: {},
    useFetchStreams: true
  },
  _settingsFrozen: true,
  _queue: <ref *1> AsyncQueueImpl {
    tail: Promise { <pending> },
    retryableOps: [],
    _isShuttingDown: false,
    delayedOperations: [],
    failure: null,
    operationInProgress: false,
    skipNonRestrictedTasks: false,
    timerIdsToSkip: [],
    backoff: ExponentialBackoff {
      queue: [Circular *1],
      timerId: 'async_queue_retry',
      initialDelayMs: 1000,
      backoffFactor: 1.5,
      maxDelayMs: 60000,
      currentBaseMs: 0,
      timerPromise: null,
      lastAttemptTime: 1706544706759
    },
    visibilityHandler: [Function (anonymous)]
  },
  _firestoreClient: FirestoreClient {
    authCredentials: FirebaseAuthCredentialsProvider {
      authProvider: [Provider],
      currentUser: [User],
      tokenCounter: 0,
      forceRefresh: false,
      auth: null,
      tokenListener: [Function (anonymous)]
    },
    appCheckCredentials: FirebaseAppCheckTokenProvider {
      appCheckProvider: [Provider],
      forceRefresh: false,
      appCheck: null,
      latestAppCheckToken: null,
      tokenListener: [Function (anonymous)]
    },
    asyncQueue: <ref *1> AsyncQueueImpl {
      tail: [Promise],
      retryableOps: [],
      _isShuttingDown: false,
      delayedOperations: [],
      failure: null,
      operationInProgress: false,
      skipNonRestrictedTasks: false,
      timerIdsToSkip: [],
      backoff: [ExponentialBackoff],
      visibilityHandler: [Function (anonymous)]
    },
    databaseInfo: DatabaseInfo {
      databaseId: [DatabaseId],
      appId: '1:637780255326:web:9fe24afc83358d770f0acf',
      persistenceKey: '[DEFAULT]',
      host: 'firestore.googleapis.com',
      ssl: true,
      forceLongPolling: false,
      autoDetectLongPolling: true,
      longPollingOptions: {},
      useFetchStreams: true
    },
    user: User { uid: null },
    clientId: 'HpUbQ2i9NLyj13L37ASO',
    authCredentialListener: [Function (anonymous)],
    appCheckCredentialListener: [Function (anonymous)]
  }
}
Listening on port 3000
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node app.js`[39m
Firebase connected:  FirebaseAppImpl {
  _isDeleted: false,
  _options: {
    apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
    authDomain: 'bot-is-server-down.firebaseapp.com',
    projectId: 'bot-is-server-down',
    storageBucket: 'bot-is-server-down.appspot.com',
    messagingSenderId: '637780255326',
    appId: '1:637780255326:web:9fe24afc83358d770f0acf'
  },
  _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
  _name: '[DEFAULT]',
  _automaticDataCollectionEnabled: false,
  _container: ComponentContainer {
    name: '[DEFAULT]',
    providers: Map(10) {
      'platform-logger' => [Provider],
      'heartbeat' => [Provider],
      'fire-core-version' => [Provider],
      'fire-core-esm2017-version' => [Provider],
      'fire-js-version' => [Provider],
      'fire-js-all-app-version' => [Provider],
      'firestore' => [Provider],
      'fire-fst-node-version' => [Provider],
      'fire-fst-esm2017-version' => [Provider],
      'app' => [Provider]
    }
  }
}
firestore intialized:  Firestore {
  _authCredentials: FirebaseAuthCredentialsProvider {
    authProvider: Provider {
      name: 'auth-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    currentUser: User { uid: null },
    tokenCounter: 0,
    forceRefresh: false,
    auth: null,
    tokenListener: [Function (anonymous)]
  },
  _appCheckCredentials: FirebaseAppCheckTokenProvider {
    appCheckProvider: Provider {
      name: 'app-check-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    forceRefresh: false,
    appCheck: null,
    latestAppCheckToken: null,
    tokenListener: [Function (anonymous)]
  },
  _databaseId: DatabaseId { projectId: 'bot-is-server-down', database: '(default)' },
  _app: FirebaseAppImpl {
    _isDeleted: false,
    _options: {
      apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
      authDomain: 'bot-is-server-down.firebaseapp.com',
      projectId: 'bot-is-server-down',
      storageBucket: 'bot-is-server-down.appspot.com',
      messagingSenderId: '637780255326',
      appId: '1:637780255326:web:9fe24afc83358d770f0acf'
    },
    _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
    _name: '[DEFAULT]',
    _automaticDataCollectionEnabled: false,
    _container: ComponentContainer { name: '[DEFAULT]', providers: [Map] }
  },
  type: 'firestore',
  _persistenceKey: '[DEFAULT]',
  _settings: FirestoreSettingsImpl {
    host: 'firestore.googleapis.com',
    ssl: true,
    credentials: undefined,
    ignoreUndefinedProperties: false,
    localCache: undefined,
    cacheSizeBytes: 41943040,
    experimentalForceLongPolling: false,
    experimentalAutoDetectLongPolling: true,
    experimentalLongPollingOptions: {},
    useFetchStreams: true
  },
  _settingsFrozen: true,
  _queue: <ref *1> AsyncQueueImpl {
    tail: Promise { <pending> },
    retryableOps: [],
    _isShuttingDown: false,
    delayedOperations: [],
    failure: null,
    operationInProgress: false,
    skipNonRestrictedTasks: false,
    timerIdsToSkip: [],
    backoff: ExponentialBackoff {
      queue: [Circular *1],
      timerId: 'async_queue_retry',
      initialDelayMs: 1000,
      backoffFactor: 1.5,
      maxDelayMs: 60000,
      currentBaseMs: 0,
      timerPromise: null,
      lastAttemptTime: 1706544709024
    },
    visibilityHandler: [Function (anonymous)]
  },
  _firestoreClient: FirestoreClient {
    authCredentials: FirebaseAuthCredentialsProvider {
      authProvider: [Provider],
      currentUser: [User],
      tokenCounter: 0,
      forceRefresh: false,
      auth: null,
      tokenListener: [Function (anonymous)]
    },
    appCheckCredentials: FirebaseAppCheckTokenProvider {
      appCheckProvider: [Provider],
      forceRefresh: false,
      appCheck: null,
      latestAppCheckToken: null,
      tokenListener: [Function (anonymous)]
    },
    asyncQueue: <ref *1> AsyncQueueImpl {
      tail: [Promise],
      retryableOps: [],
      _isShuttingDown: false,
      delayedOperations: [],
      failure: null,
      operationInProgress: false,
      skipNonRestrictedTasks: false,
      timerIdsToSkip: [],
      backoff: [ExponentialBackoff],
      visibilityHandler: [Function (anonymous)]
    },
    databaseInfo: DatabaseInfo {
      databaseId: [DatabaseId],
      appId: '1:637780255326:web:9fe24afc83358d770f0acf',
      persistenceKey: '[DEFAULT]',
      host: 'firestore.googleapis.com',
      ssl: true,
      forceLongPolling: false,
      autoDetectLongPolling: true,
      longPollingOptions: {},
      useFetchStreams: true
    },
    user: User { uid: null },
    clientId: 'sKW5dqwH8a7xHwOnITto',
    authCredentialListener: [Function (anonymous)],
    appCheckCredentialListener: [Function (anonymous)]
  }
}
Listening on port 3000
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node app.js`[39m
Firebase connected:  FirebaseAppImpl {
  _isDeleted: false,
  _options: {
    apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
    authDomain: 'bot-is-server-down.firebaseapp.com',
    projectId: 'bot-is-server-down',
    storageBucket: 'bot-is-server-down.appspot.com',
    messagingSenderId: '637780255326',
    appId: '1:637780255326:web:9fe24afc83358d770f0acf'
  },
  _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
  _name: '[DEFAULT]',
  _automaticDataCollectionEnabled: false,
  _container: ComponentContainer {
    name: '[DEFAULT]',
    providers: Map(10) {
      'platform-logger' => [Provider],
      'heartbeat' => [Provider],
      'fire-core-version' => [Provider],
      'fire-core-esm2017-version' => [Provider],
      'fire-js-version' => [Provider],
      'fire-js-all-app-version' => [Provider],
      'firestore' => [Provider],
      'fire-fst-node-version' => [Provider],
      'fire-fst-esm2017-version' => [Provider],
      'app' => [Provider]
    }
  }
}
firestore intialized:  Firestore {
  _authCredentials: FirebaseAuthCredentialsProvider {
    authProvider: Provider {
      name: 'auth-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    currentUser: User { uid: null },
    tokenCounter: 0,
    forceRefresh: false,
    auth: null,
    tokenListener: [Function (anonymous)]
  },
  _appCheckCredentials: FirebaseAppCheckTokenProvider {
    appCheckProvider: Provider {
      name: 'app-check-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    forceRefresh: false,
    appCheck: null,
    latestAppCheckToken: null,
    tokenListener: [Function (anonymous)]
  },
  _databaseId: DatabaseId { projectId: 'bot-is-server-down', database: '(default)' },
  _app: FirebaseAppImpl {
    _isDeleted: false,
    _options: {
      apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
      authDomain: 'bot-is-server-down.firebaseapp.com',
      projectId: 'bot-is-server-down',
      storageBucket: 'bot-is-server-down.appspot.com',
      messagingSenderId: '637780255326',
      appId: '1:637780255326:web:9fe24afc83358d770f0acf'
    },
    _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
    _name: '[DEFAULT]',
    _automaticDataCollectionEnabled: false,
    _container: ComponentContainer { name: '[DEFAULT]', providers: [Map] }
  },
  type: 'firestore',
  _persistenceKey: '[DEFAULT]',
  _settings: FirestoreSettingsImpl {
    host: 'firestore.googleapis.com',
    ssl: true,
    credentials: undefined,
    ignoreUndefinedProperties: false,
    localCache: undefined,
    cacheSizeBytes: 41943040,
    experimentalForceLongPolling: false,
    experimentalAutoDetectLongPolling: true,
    experimentalLongPollingOptions: {},
    useFetchStreams: true
  },
  _settingsFrozen: true,
  _queue: <ref *1> AsyncQueueImpl {
    tail: Promise { <pending> },
    retryableOps: [],
    _isShuttingDown: false,
    delayedOperations: [],
    failure: null,
    operationInProgress: false,
    skipNonRestrictedTasks: false,
    timerIdsToSkip: [],
    backoff: ExponentialBackoff {
      queue: [Circular *1],
      timerId: 'async_queue_retry',
      initialDelayMs: 1000,
      backoffFactor: 1.5,
      maxDelayMs: 60000,
      currentBaseMs: 0,
      timerPromise: null,
      lastAttemptTime: 1706544719215
    },
    visibilityHandler: [Function (anonymous)]
  },
  _firestoreClient: FirestoreClient {
    authCredentials: FirebaseAuthCredentialsProvider {
      authProvider: [Provider],
      currentUser: [User],
      tokenCounter: 0,
      forceRefresh: false,
      auth: null,
      tokenListener: [Function (anonymous)]
    },
    appCheckCredentials: FirebaseAppCheckTokenProvider {
      appCheckProvider: [Provider],
      forceRefresh: false,
      appCheck: null,
      latestAppCheckToken: null,
      tokenListener: [Function (anonymous)]
    },
    asyncQueue: <ref *1> AsyncQueueImpl {
      tail: [Promise],
      retryableOps: [],
      _isShuttingDown: false,
      delayedOperations: [],
      failure: null,
      operationInProgress: false,
      skipNonRestrictedTasks: false,
      timerIdsToSkip: [],
      backoff: [ExponentialBackoff],
      visibilityHandler: [Function (anonymous)]
    },
    databaseInfo: DatabaseInfo {
      databaseId: [DatabaseId],
      appId: '1:637780255326:web:9fe24afc83358d770f0acf',
      persistenceKey: '[DEFAULT]',
      host: 'firestore.googleapis.com',
      ssl: true,
      forceLongPolling: false,
      autoDetectLongPolling: true,
      longPollingOptions: {},
      useFetchStreams: true
    },
    user: User { uid: null },
    clientId: 'on5Jdx6QYssmYQaww5rP',
    authCredentialListener: [Function (anonymous)],
    appCheckCredentialListener: [Function (anonymous)]
  }
}
Listening on port 3000
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node app.js`[39m
Firebase connected:  FirebaseAppImpl {
  _isDeleted: false,
  _options: {
    apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
    authDomain: 'bot-is-server-down.firebaseapp.com',
    projectId: 'bot-is-server-down',
    storageBucket: 'bot-is-server-down.appspot.com',
    messagingSenderId: '637780255326',
    appId: '1:637780255326:web:9fe24afc83358d770f0acf'
  },
  _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
  _name: '[DEFAULT]',
  _automaticDataCollectionEnabled: false,
  _container: ComponentContainer {
    name: '[DEFAULT]',
    providers: Map(10) {
      'platform-logger' => [Provider],
      'heartbeat' => [Provider],
      'fire-core-version' => [Provider],
      'fire-core-esm2017-version' => [Provider],
      'fire-js-version' => [Provider],
      'fire-js-all-app-version' => [Provider],
      'firestore' => [Provider],
      'fire-fst-node-version' => [Provider],
      'fire-fst-esm2017-version' => [Provider],
      'app' => [Provider]
    }
  }
}
firestore intialized:  Firestore {
  _authCredentials: FirebaseAuthCredentialsProvider {
    authProvider: Provider {
      name: 'auth-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    currentUser: User { uid: null },
    tokenCounter: 0,
    forceRefresh: false,
    auth: null,
    tokenListener: [Function (anonymous)]
  },
  _appCheckCredentials: FirebaseAppCheckTokenProvider {
    appCheckProvider: Provider {
      name: 'app-check-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    forceRefresh: false,
    appCheck: null,
    latestAppCheckToken: null,
    tokenListener: [Function (anonymous)]
  },
  _databaseId: DatabaseId { projectId: 'bot-is-server-down', database: '(default)' },
  _app: FirebaseAppImpl {
    _isDeleted: false,
    _options: {
      apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
      authDomain: 'bot-is-server-down.firebaseapp.com',
      projectId: 'bot-is-server-down',
      storageBucket: 'bot-is-server-down.appspot.com',
      messagingSenderId: '637780255326',
      appId: '1:637780255326:web:9fe24afc83358d770f0acf'
    },
    _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
    _name: '[DEFAULT]',
    _automaticDataCollectionEnabled: false,
    _container: ComponentContainer { name: '[DEFAULT]', providers: [Map] }
  },
  type: 'firestore',
  _persistenceKey: '[DEFAULT]',
  _settings: FirestoreSettingsImpl {
    host: 'firestore.googleapis.com',
    ssl: true,
    credentials: undefined,
    ignoreUndefinedProperties: false,
    localCache: undefined,
    cacheSizeBytes: 41943040,
    experimentalForceLongPolling: false,
    experimentalAutoDetectLongPolling: true,
    experimentalLongPollingOptions: {},
    useFetchStreams: true
  },
  _settingsFrozen: true,
  _queue: <ref *1> AsyncQueueImpl {
    tail: Promise { <pending> },
    retryableOps: [],
    _isShuttingDown: false,
    delayedOperations: [],
    failure: null,
    operationInProgress: false,
    skipNonRestrictedTasks: false,
    timerIdsToSkip: [],
    backoff: ExponentialBackoff {
      queue: [Circular *1],
      timerId: 'async_queue_retry',
      initialDelayMs: 1000,
      backoffFactor: 1.5,
      maxDelayMs: 60000,
      currentBaseMs: 0,
      timerPromise: null,
      lastAttemptTime: 1706544726193
    },
    visibilityHandler: [Function (anonymous)]
  },
  _firestoreClient: FirestoreClient {
    authCredentials: FirebaseAuthCredentialsProvider {
      authProvider: [Provider],
      currentUser: [User],
      tokenCounter: 0,
      forceRefresh: false,
      auth: null,
      tokenListener: [Function (anonymous)]
    },
    appCheckCredentials: FirebaseAppCheckTokenProvider {
      appCheckProvider: [Provider],
      forceRefresh: false,
      appCheck: null,
      latestAppCheckToken: null,
      tokenListener: [Function (anonymous)]
    },
    asyncQueue: <ref *1> AsyncQueueImpl {
      tail: [Promise],
      retryableOps: [],
      _isShuttingDown: false,
      delayedOperations: [],
      failure: null,
      operationInProgress: false,
      skipNonRestrictedTasks: false,
      timerIdsToSkip: [],
      backoff: [ExponentialBackoff],
      visibilityHandler: [Function (anonymous)]
    },
    databaseInfo: DatabaseInfo {
      databaseId: [DatabaseId],
      appId: '1:637780255326:web:9fe24afc83358d770f0acf',
      persistenceKey: '[DEFAULT]',
      host: 'firestore.googleapis.com',
      ssl: true,
      forceLongPolling: false,
      autoDetectLongPolling: true,
      longPollingOptions: {},
      useFetchStreams: true
    },
    user: User { uid: null },
    clientId: 'Td3urZwNAgRKQAL5DyTd',
    authCredentialListener: [Function (anonymous)],
    appCheckCredentialListener: [Function (anonymous)]
  }
}
Listening on port 3000
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node app.js`[39m
Firebase connected:  FirebaseAppImpl {
  _isDeleted: false,
  _options: {
    apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
    authDomain: 'bot-is-server-down.firebaseapp.com',
    projectId: 'bot-is-server-down',
    storageBucket: 'bot-is-server-down.appspot.com',
    messagingSenderId: '637780255326',
    appId: '1:637780255326:web:9fe24afc83358d770f0acf'
  },
  _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
  _name: '[DEFAULT]',
  _automaticDataCollectionEnabled: false,
  _container: ComponentContainer {
    name: '[DEFAULT]',
    providers: Map(10) {
      'platform-logger' => [Provider],
      'heartbeat' => [Provider],
      'fire-core-version' => [Provider],
      'fire-core-esm2017-version' => [Provider],
      'fire-js-version' => [Provider],
      'fire-js-all-app-version' => [Provider],
      'firestore' => [Provider],
      'fire-fst-node-version' => [Provider],
      'fire-fst-esm2017-version' => [Provider],
      'app' => [Provider]
    }
  }
}
firestore intialized:  Firestore {
  _authCredentials: FirebaseAuthCredentialsProvider {
    authProvider: Provider {
      name: 'auth-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    currentUser: User { uid: null },
    tokenCounter: 0,
    forceRefresh: false,
    auth: null,
    tokenListener: [Function (anonymous)]
  },
  _appCheckCredentials: FirebaseAppCheckTokenProvider {
    appCheckProvider: Provider {
      name: 'app-check-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    forceRefresh: false,
    appCheck: null,
    latestAppCheckToken: null,
    tokenListener: [Function (anonymous)]
  },
  _databaseId: DatabaseId { projectId: 'bot-is-server-down', database: '(default)' },
  _app: FirebaseAppImpl {
    _isDeleted: false,
    _options: {
      apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
      authDomain: 'bot-is-server-down.firebaseapp.com',
      projectId: 'bot-is-server-down',
      storageBucket: 'bot-is-server-down.appspot.com',
      messagingSenderId: '637780255326',
      appId: '1:637780255326:web:9fe24afc83358d770f0acf'
    },
    _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
    _name: '[DEFAULT]',
    _automaticDataCollectionEnabled: false,
    _container: ComponentContainer { name: '[DEFAULT]', providers: [Map] }
  },
  type: 'firestore',
  _persistenceKey: '[DEFAULT]',
  _settings: FirestoreSettingsImpl {
    host: 'firestore.googleapis.com',
    ssl: true,
    credentials: undefined,
    ignoreUndefinedProperties: false,
    localCache: undefined,
    cacheSizeBytes: 41943040,
    experimentalForceLongPolling: false,
    experimentalAutoDetectLongPolling: true,
    experimentalLongPollingOptions: {},
    useFetchStreams: true
  },
  _settingsFrozen: true,
  _queue: <ref *1> AsyncQueueImpl {
    tail: Promise { <pending> },
    retryableOps: [],
    _isShuttingDown: false,
    delayedOperations: [],
    failure: null,
    operationInProgress: false,
    skipNonRestrictedTasks: false,
    timerIdsToSkip: [],
    backoff: ExponentialBackoff {
      queue: [Circular *1],
      timerId: 'async_queue_retry',
      initialDelayMs: 1000,
      backoffFactor: 1.5,
      maxDelayMs: 60000,
      currentBaseMs: 0,
      timerPromise: null,
      lastAttemptTime: 1706544749634
    },
    visibilityHandler: [Function (anonymous)]
  },
  _firestoreClient: FirestoreClient {
    authCredentials: FirebaseAuthCredentialsProvider {
      authProvider: [Provider],
      currentUser: [User],
      tokenCounter: 0,
      forceRefresh: false,
      auth: null,
      tokenListener: [Function (anonymous)]
    },
    appCheckCredentials: FirebaseAppCheckTokenProvider {
      appCheckProvider: [Provider],
      forceRefresh: false,
      appCheck: null,
      latestAppCheckToken: null,
      tokenListener: [Function (anonymous)]
    },
    asyncQueue: <ref *1> AsyncQueueImpl {
      tail: [Promise],
      retryableOps: [],
      _isShuttingDown: false,
      delayedOperations: [],
      failure: null,
      operationInProgress: false,
      skipNonRestrictedTasks: false,
      timerIdsToSkip: [],
      backoff: [ExponentialBackoff],
      visibilityHandler: [Function (anonymous)]
    },
    databaseInfo: DatabaseInfo {
      databaseId: [DatabaseId],
      appId: '1:637780255326:web:9fe24afc83358d770f0acf',
      persistenceKey: '[DEFAULT]',
      host: 'firestore.googleapis.com',
      ssl: true,
      forceLongPolling: false,
      autoDetectLongPolling: true,
      longPollingOptions: {},
      useFetchStreams: true
    },
    user: User { uid: null },
    clientId: 'nsSpjkbFEoHHMzIm1Flo',
    authCredentialListener: [Function (anonymous)],
    appCheckCredentialListener: [Function (anonymous)]
  }
}
Listening on port 3000
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node app.js`[39m
Firebase connected:  FirebaseAppImpl {
  _isDeleted: false,
  _options: {
    apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
    authDomain: 'bot-is-server-down.firebaseapp.com',
    projectId: 'bot-is-server-down',
    storageBucket: 'bot-is-server-down.appspot.com',
    messagingSenderId: '637780255326',
    appId: '1:637780255326:web:9fe24afc83358d770f0acf'
  },
  _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
  _name: '[DEFAULT]',
  _automaticDataCollectionEnabled: false,
  _container: ComponentContainer {
    name: '[DEFAULT]',
    providers: Map(10) {
      'platform-logger' => [Provider],
      'heartbeat' => [Provider],
      'fire-core-version' => [Provider],
      'fire-core-esm2017-version' => [Provider],
      'fire-js-version' => [Provider],
      'fire-js-all-app-version' => [Provider],
      'firestore' => [Provider],
      'fire-fst-node-version' => [Provider],
      'fire-fst-esm2017-version' => [Provider],
      'app' => [Provider]
    }
  }
}
firestore intialized:  Firestore {
  _authCredentials: FirebaseAuthCredentialsProvider {
    authProvider: Provider {
      name: 'auth-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    currentUser: User { uid: null },
    tokenCounter: 0,
    forceRefresh: false,
    auth: null,
    tokenListener: [Function (anonymous)]
  },
  _appCheckCredentials: FirebaseAppCheckTokenProvider {
    appCheckProvider: Provider {
      name: 'app-check-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    forceRefresh: false,
    appCheck: null,
    latestAppCheckToken: null,
    tokenListener: [Function (anonymous)]
  },
  _databaseId: DatabaseId { projectId: 'bot-is-server-down', database: '(default)' },
  _app: FirebaseAppImpl {
    _isDeleted: false,
    _options: {
      apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
      authDomain: 'bot-is-server-down.firebaseapp.com',
      projectId: 'bot-is-server-down',
      storageBucket: 'bot-is-server-down.appspot.com',
      messagingSenderId: '637780255326',
      appId: '1:637780255326:web:9fe24afc83358d770f0acf'
    },
    _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
    _name: '[DEFAULT]',
    _automaticDataCollectionEnabled: false,
    _container: ComponentContainer { name: '[DEFAULT]', providers: [Map] }
  },
  type: 'firestore',
  _persistenceKey: '[DEFAULT]',
  _settings: FirestoreSettingsImpl {
    host: 'firestore.googleapis.com',
    ssl: true,
    credentials: undefined,
    ignoreUndefinedProperties: false,
    localCache: undefined,
    cacheSizeBytes: 41943040,
    experimentalForceLongPolling: false,
    experimentalAutoDetectLongPolling: true,
    experimentalLongPollingOptions: {},
    useFetchStreams: true
  },
  _settingsFrozen: true,
  _queue: <ref *1> AsyncQueueImpl {
    tail: Promise { <pending> },
    retryableOps: [],
    _isShuttingDown: false,
    delayedOperations: [],
    failure: null,
    operationInProgress: false,
    skipNonRestrictedTasks: false,
    timerIdsToSkip: [],
    backoff: ExponentialBackoff {
      queue: [Circular *1],
      timerId: 'async_queue_retry',
      initialDelayMs: 1000,
      backoffFactor: 1.5,
      maxDelayMs: 60000,
      currentBaseMs: 0,
      timerPromise: null,
      lastAttemptTime: 1706544756929
    },
    visibilityHandler: [Function (anonymous)]
  },
  _firestoreClient: FirestoreClient {
    authCredentials: FirebaseAuthCredentialsProvider {
      authProvider: [Provider],
      currentUser: [User],
      tokenCounter: 0,
      forceRefresh: false,
      auth: null,
      tokenListener: [Function (anonymous)]
    },
    appCheckCredentials: FirebaseAppCheckTokenProvider {
      appCheckProvider: [Provider],
      forceRefresh: false,
      appCheck: null,
      latestAppCheckToken: null,
      tokenListener: [Function (anonymous)]
    },
    asyncQueue: <ref *1> AsyncQueueImpl {
      tail: [Promise],
      retryableOps: [],
      _isShuttingDown: false,
      delayedOperations: [],
      failure: null,
      operationInProgress: false,
      skipNonRestrictedTasks: false,
      timerIdsToSkip: [],
      backoff: [ExponentialBackoff],
      visibilityHandler: [Function (anonymous)]
    },
    databaseInfo: DatabaseInfo {
      databaseId: [DatabaseId],
      appId: '1:637780255326:web:9fe24afc83358d770f0acf',
      persistenceKey: '[DEFAULT]',
      host: 'firestore.googleapis.com',
      ssl: true,
      forceLongPolling: false,
      autoDetectLongPolling: true,
      longPollingOptions: {},
      useFetchStreams: true
    },
    user: User { uid: null },
    clientId: 'kVC7797fSG4rNtxmBIfh',
    authCredentialListener: [Function (anonymous)],
    appCheckCredentialListener: [Function (anonymous)]
  }
}
Listening on port 3000
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node app.js`[39m
Firebase connected:  FirebaseAppImpl {
  _isDeleted: false,
  _options: {
    apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
    authDomain: 'bot-is-server-down.firebaseapp.com',
    projectId: 'bot-is-server-down',
    storageBucket: 'bot-is-server-down.appspot.com',
    messagingSenderId: '637780255326',
    appId: '1:637780255326:web:9fe24afc83358d770f0acf'
  },
  _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
  _name: '[DEFAULT]',
  _automaticDataCollectionEnabled: false,
  _container: ComponentContainer {
    name: '[DEFAULT]',
    providers: Map(10) {
      'platform-logger' => [Provider],
      'heartbeat' => [Provider],
      'fire-core-version' => [Provider],
      'fire-core-esm2017-version' => [Provider],
      'fire-js-version' => [Provider],
      'fire-js-all-app-version' => [Provider],
      'firestore' => [Provider],
      'fire-fst-node-version' => [Provider],
      'fire-fst-esm2017-version' => [Provider],
      'app' => [Provider]
    }
  }
}
firestore intialized:  Firestore {
  _authCredentials: FirebaseAuthCredentialsProvider {
    authProvider: Provider {
      name: 'auth-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    currentUser: User { uid: null },
    tokenCounter: 0,
    forceRefresh: false,
    auth: null,
    tokenListener: [Function (anonymous)]
  },
  _appCheckCredentials: FirebaseAppCheckTokenProvider {
    appCheckProvider: Provider {
      name: 'app-check-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    forceRefresh: false,
    appCheck: null,
    latestAppCheckToken: null,
    tokenListener: [Function (anonymous)]
  },
  _databaseId: DatabaseId { projectId: 'bot-is-server-down', database: '(default)' },
  _app: FirebaseAppImpl {
    _isDeleted: false,
    _options: {
      apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
      authDomain: 'bot-is-server-down.firebaseapp.com',
      projectId: 'bot-is-server-down',
      storageBucket: 'bot-is-server-down.appspot.com',
      messagingSenderId: '637780255326',
      appId: '1:637780255326:web:9fe24afc83358d770f0acf'
    },
    _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
    _name: '[DEFAULT]',
    _automaticDataCollectionEnabled: false,
    _container: ComponentContainer { name: '[DEFAULT]', providers: [Map] }
  },
  type: 'firestore',
  _persistenceKey: '[DEFAULT]',
  _settings: FirestoreSettingsImpl {
    host: 'firestore.googleapis.com',
    ssl: true,
    credentials: undefined,
    ignoreUndefinedProperties: false,
    localCache: undefined,
    cacheSizeBytes: 41943040,
    experimentalForceLongPolling: false,
    experimentalAutoDetectLongPolling: true,
    experimentalLongPollingOptions: {},
    useFetchStreams: true
  },
  _settingsFrozen: true,
  _queue: <ref *1> AsyncQueueImpl {
    tail: Promise { <pending> },
    retryableOps: [],
    _isShuttingDown: false,
    delayedOperations: [],
    failure: null,
    operationInProgress: false,
    skipNonRestrictedTasks: false,
    timerIdsToSkip: [],
    backoff: ExponentialBackoff {
      queue: [Circular *1],
      timerId: 'async_queue_retry',
      initialDelayMs: 1000,
      backoffFactor: 1.5,
      maxDelayMs: 60000,
      currentBaseMs: 0,
      timerPromise: null,
      lastAttemptTime: 1706544766807
    },
    visibilityHandler: [Function (anonymous)]
  },
  _firestoreClient: FirestoreClient {
    authCredentials: FirebaseAuthCredentialsProvider {
      authProvider: [Provider],
      currentUser: [User],
      tokenCounter: 0,
      forceRefresh: false,
      auth: null,
      tokenListener: [Function (anonymous)]
    },
    appCheckCredentials: FirebaseAppCheckTokenProvider {
      appCheckProvider: [Provider],
      forceRefresh: false,
      appCheck: null,
      latestAppCheckToken: null,
      tokenListener: [Function (anonymous)]
    },
    asyncQueue: <ref *1> AsyncQueueImpl {
      tail: [Promise],
      retryableOps: [],
      _isShuttingDown: false,
      delayedOperations: [],
      failure: null,
      operationInProgress: false,
      skipNonRestrictedTasks: false,
      timerIdsToSkip: [],
      backoff: [ExponentialBackoff],
      visibilityHandler: [Function (anonymous)]
    },
    databaseInfo: DatabaseInfo {
      databaseId: [DatabaseId],
      appId: '1:637780255326:web:9fe24afc83358d770f0acf',
      persistenceKey: '[DEFAULT]',
      host: 'firestore.googleapis.com',
      ssl: true,
      forceLongPolling: false,
      autoDetectLongPolling: true,
      longPollingOptions: {},
      useFetchStreams: true
    },
    user: User { uid: null },
    clientId: 'JpQT1B4448g4Qqs5Kmx5',
    authCredentialListener: [Function (anonymous)],
    appCheckCredentialListener: [Function (anonymous)]
  }
}
Listening on port 3000
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node app.js`[39m
Firebase connected:  FirebaseAppImpl {
  _isDeleted: false,
  _options: {
    apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
    authDomain: 'bot-is-server-down.firebaseapp.com',
    projectId: 'bot-is-server-down',
    storageBucket: 'bot-is-server-down.appspot.com',
    messagingSenderId: '637780255326',
    appId: '1:637780255326:web:9fe24afc83358d770f0acf'
  },
  _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
  _name: '[DEFAULT]',
  _automaticDataCollectionEnabled: false,
  _container: ComponentContainer {
    name: '[DEFAULT]',
    providers: Map(10) {
      'platform-logger' => [Provider],
      'heartbeat' => [Provider],
      'fire-core-version' => [Provider],
      'fire-core-esm2017-version' => [Provider],
      'fire-js-version' => [Provider],
      'fire-js-all-app-version' => [Provider],
      'firestore' => [Provider],
      'fire-fst-node-version' => [Provider],
      'fire-fst-esm2017-version' => [Provider],
      'app' => [Provider]
    }
  }
}
firestore intialized:  Firestore {
  _authCredentials: FirebaseAuthCredentialsProvider {
    authProvider: Provider {
      name: 'auth-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    currentUser: User { uid: null },
    tokenCounter: 0,
    forceRefresh: false,
    auth: null,
    tokenListener: [Function (anonymous)]
  },
  _appCheckCredentials: FirebaseAppCheckTokenProvider {
    appCheckProvider: Provider {
      name: 'app-check-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    forceRefresh: false,
    appCheck: null,
    latestAppCheckToken: null,
    tokenListener: [Function (anonymous)]
  },
  _databaseId: DatabaseId { projectId: 'bot-is-server-down', database: '(default)' },
  _app: FirebaseAppImpl {
    _isDeleted: false,
    _options: {
      apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
      authDomain: 'bot-is-server-down.firebaseapp.com',
      projectId: 'bot-is-server-down',
      storageBucket: 'bot-is-server-down.appspot.com',
      messagingSenderId: '637780255326',
      appId: '1:637780255326:web:9fe24afc83358d770f0acf'
    },
    _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
    _name: '[DEFAULT]',
    _automaticDataCollectionEnabled: false,
    _container: ComponentContainer { name: '[DEFAULT]', providers: [Map] }
  },
  type: 'firestore',
  _persistenceKey: '[DEFAULT]',
  _settings: FirestoreSettingsImpl {
    host: 'firestore.googleapis.com',
    ssl: true,
    credentials: undefined,
    ignoreUndefinedProperties: false,
    localCache: undefined,
    cacheSizeBytes: 41943040,
    experimentalForceLongPolling: false,
    experimentalAutoDetectLongPolling: true,
    experimentalLongPollingOptions: {},
    useFetchStreams: true
  },
  _settingsFrozen: true,
  _queue: <ref *1> AsyncQueueImpl {
    tail: Promise { <pending> },
    retryableOps: [],
    _isShuttingDown: false,
    delayedOperations: [],
    failure: null,
    operationInProgress: false,
    skipNonRestrictedTasks: false,
    timerIdsToSkip: [],
    backoff: ExponentialBackoff {
      queue: [Circular *1],
      timerId: 'async_queue_retry',
      initialDelayMs: 1000,
      backoffFactor: 1.5,
      maxDelayMs: 60000,
      currentBaseMs: 0,
      timerPromise: null,
      lastAttemptTime: 1706544840406
    },
    visibilityHandler: [Function (anonymous)]
  },
  _firestoreClient: FirestoreClient {
    authCredentials: FirebaseAuthCredentialsProvider {
      authProvider: [Provider],
      currentUser: [User],
      tokenCounter: 0,
      forceRefresh: false,
      auth: null,
      tokenListener: [Function (anonymous)]
    },
    appCheckCredentials: FirebaseAppCheckTokenProvider {
      appCheckProvider: [Provider],
      forceRefresh: false,
      appCheck: null,
      latestAppCheckToken: null,
      tokenListener: [Function (anonymous)]
    },
    asyncQueue: <ref *1> AsyncQueueImpl {
      tail: [Promise],
      retryableOps: [],
      _isShuttingDown: false,
      delayedOperations: [],
      failure: null,
      operationInProgress: false,
      skipNonRestrictedTasks: false,
      timerIdsToSkip: [],
      backoff: [ExponentialBackoff],
      visibilityHandler: [Function (anonymous)]
    },
    databaseInfo: DatabaseInfo {
      databaseId: [DatabaseId],
      appId: '1:637780255326:web:9fe24afc83358d770f0acf',
      persistenceKey: '[DEFAULT]',
      host: 'firestore.googleapis.com',
      ssl: true,
      forceLongPolling: false,
      autoDetectLongPolling: true,
      longPollingOptions: {},
      useFetchStreams: true
    },
    user: User { uid: null },
    clientId: 'zTVFTIvv3u1axsacTgwL',
    authCredentialListener: [Function (anonymous)],
    appCheckCredentialListener: [Function (anonymous)]
  }
}
Listening on port 3000
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node app.js`[39m
Firebase connected:  FirebaseAppImpl {
  _isDeleted: false,
  _options: {
    apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
    authDomain: 'bot-is-server-down.firebaseapp.com',
    projectId: 'bot-is-server-down',
    storageBucket: 'bot-is-server-down.appspot.com',
    messagingSenderId: '637780255326',
    appId: '1:637780255326:web:9fe24afc83358d770f0acf'
  },
  _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
  _name: '[DEFAULT]',
  _automaticDataCollectionEnabled: false,
  _container: ComponentContainer {
    name: '[DEFAULT]',
    providers: Map(10) {
      'platform-logger' => [Provider],
      'heartbeat' => [Provider],
      'fire-core-version' => [Provider],
      'fire-core-esm2017-version' => [Provider],
      'fire-js-version' => [Provider],
      'fire-js-all-app-version' => [Provider],
      'firestore' => [Provider],
      'fire-fst-node-version' => [Provider],
      'fire-fst-esm2017-version' => [Provider],
      'app' => [Provider]
    }
  }
}
firestore intialized:  Firestore {
  _authCredentials: FirebaseAuthCredentialsProvider {
    authProvider: Provider {
      name: 'auth-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    currentUser: User { uid: null },
    tokenCounter: 0,
    forceRefresh: false,
    auth: null,
    tokenListener: [Function (anonymous)]
  },
  _appCheckCredentials: FirebaseAppCheckTokenProvider {
    appCheckProvider: Provider {
      name: 'app-check-internal',
      container: [ComponentContainer],
      component: null,
      instances: Map(0) {},
      instancesDeferred: Map(0) {},
      instancesOptions: Map(0) {},
      onInitCallbacks: [Map]
    },
    forceRefresh: false,
    appCheck: null,
    latestAppCheckToken: null,
    tokenListener: [Function (anonymous)]
  },
  _databaseId: DatabaseId { projectId: 'bot-is-server-down', database: '(default)' },
  _app: FirebaseAppImpl {
    _isDeleted: false,
    _options: {
      apiKey: 'AIzaSyAFQ0oqsep8W0AMrQ9pBDYxax-rTyGUaO8',
      authDomain: 'bot-is-server-down.firebaseapp.com',
      projectId: 'bot-is-server-down',
      storageBucket: 'bot-is-server-down.appspot.com',
      messagingSenderId: '637780255326',
      appId: '1:637780255326:web:9fe24afc83358d770f0acf'
    },
    _config: { name: '[DEFAULT]', automaticDataCollectionEnabled: false },
    _name: '[DEFAULT]',
    _automaticDataCollectionEnabled: false,
    _container: ComponentContainer { name: '[DEFAULT]', providers: [Map] }
  },
  type: 'firestore',
  _persistenceKey: '[DEFAULT]',
  _settings: FirestoreSettingsImpl {
    host: 'firestore.googleapis.com',
    ssl: true,
    credentials: undefined,
    ignoreUndefinedProperties: false,
    localCache: undefined,
    cacheSizeBytes: 41943040,
    experimentalForceLongPolling: false,
    experimentalAutoDetectLongPolling: true,
    experimentalLongPollingOptions: {},
    useFetchStreams: true
  },
  _settingsFrozen: true,
  _queue: <ref *1> AsyncQueueImpl {
    tail: Promise { <pending> },
    retryableOps: [],
    _isShuttingDown: false,
    delayedOperations: [],
    failure: null,
    operationInProgress: false,
    skipNonRestrictedTasks: false,
    timerIdsToSkip: [],
    backoff: ExponentialBackoff {
      queue: [Circular *1],
      timerId: 'async_queue_retry',
      initialDelayMs: 1000,
      backoffFactor: 1.5,
      maxDelayMs: 60000,
      currentBaseMs: 0,
      timerPromise: null,
      lastAttemptTime: 1706544995695
    },
    visibilityHandler: [Function (anonymous)]
  },
  _firestoreClient: FirestoreClient {
    authCredentials: FirebaseAuthCredentialsProvider {
      authProvider: [Provider],
      currentUser: [User],
      tokenCounter: 0,
      forceRefresh: false,
      auth: null,
      tokenListener: [Function (anonymous)]
    },
    appCheckCredentials: FirebaseAppCheckTokenProvider {
      appCheckProvider: [Provider],
      forceRefresh: false,
      appCheck: null,
      latestAppCheckToken: null,
      tokenListener: [Function (anonymous)]
    },
    asyncQueue: <ref *1> AsyncQueueImpl {
      tail: [Promise],
      retryableOps: [],
      _isShuttingDown: false,
      delayedOperations: [],
      failure: null,
      operationInProgress: false,
      skipNonRestrictedTasks: false,
      timerIdsToSkip: [],
      backoff: [ExponentialBackoff],
      visibilityHandler: [Function (anonymous)]
    },
    databaseInfo: DatabaseInfo {
      databaseId: [DatabaseId],
      appId: '1:637780255326:web:9fe24afc83358d770f0acf',
      persistenceKey: '[DEFAULT]',
      host: 'firestore.googleapis.com',
      ssl: true,
      forceLongPolling: false,
      autoDetectLongPolling: true,
      longPollingOptions: {},
      useFetchStreams: true
    },
    user: User { uid: null },
    clientId: 'nVTHQag77WpL5rR5TD18',
    authCredentialListener: [Function (anonymous)],
    appCheckCredentialListener: [Function (anonymous)]
  }
}
Listening on port 3000
